// The exported code uses Tailwind CSS. Install Tailwind CSS in your dev environment to ensure all styles work.
import React, { useState, useEffect } from "react";
import * as echarts from "echarts";
const App: React.FC = () => {
  const [selectedClaim, setSelectedClaim] = useState<Claim | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);
  const [isExportDropdownOpen, setIsExportDropdownOpen] = useState(false);
  const [isBulkActionDropdownOpen, setIsBulkActionDropdownOpen] =
    useState(false);
  const [isAssignDropdownOpen, setIsAssignDropdownOpen] = useState(false);
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedClaims, setSelectedClaims] = useState<string[]>([]);
  const [selectAll, setSelectAll] = useState(false);
  const [dateRange, setDateRange] = useState<{ start: string; end: string }>({
    start: "2025-05-01",
    end: "2025-06-10",
  });
  const [sortConfig, setSortConfig] = useState<{
    key: keyof Claim | null;
    direction: "ascending" | "descending";
  }>({
    key: null,
    direction: "ascending",
  });
  const itemsPerPage = 10;
  // Sample data for claims
  const claimsData: Claim[] = [
    {
      id: "CLM-2025-001",
      patientName: "John Smith",
      provider: "Memorial Hospital",
      amount: 1250.75,
      submissionDate: "2025-06-05",
      status: "approved",
      insuranceProvider: "Blue Cross",
      claimType: "Medical",
      description: "Emergency room visit for acute appendicitis",
      processingTime: "24 hours",
      assignedTo: "Sarah Johnson",
      priority: "Medium",
      documents: ["Medical Report", "Insurance Card", "ID Verification"],
      notes: "Patient has history of similar symptoms",
      selected: false,
    },
    {
      id: "CLM-2025-002",
      patientName: "Emma Davis",
      provider: "City Medical Center",
      amount: 3450.5,
      submissionDate: "2025-06-07",
      status: "pending",
      insuranceProvider: "Aetna",
      claimType: "Surgical",
      description: "Knee replacement surgery",
      processingTime: "Pending",
      assignedTo: "Michael Chen",
      priority: "High",
      documents: ["Surgical Report", "Pre-authorization", "Insurance Card"],
      notes: "Waiting for additional documentation from provider",
      selected: false,
    },
    {
      id: "CLM-2025-003",
      patientName: "Robert Johnson",
      provider: "Wellness Clinic",
      amount: 780.25,
      submissionDate: "2025-06-08",
      status: "rejected",
      insuranceProvider: "United Health",
      claimType: "Diagnostic",
      description: "MRI scan for lower back pain",
      processingTime: "36 hours",
      assignedTo: "Jessica Taylor",
      priority: "Low",
      documents: ["MRI Results", "Physician Notes", "Claim Form"],
      notes: "Rejected due to missing pre-authorization",
      selected: false,
    },
    {
      id: "CLM-2025-004",
      patientName: "Maria Garcia",
      provider: "Family Health Practice",
      amount: 550.0,
      submissionDate: "2025-06-09",
      status: "approved",
      insuranceProvider: "Cigna",
      claimType: "Preventive",
      description: "Annual physical examination",
      processingTime: "18 hours",
      assignedTo: "David Wilson",
      priority: "Low",
      documents: ["Examination Report", "Lab Results", "Insurance Card"],
      notes: "Routine annual check-up covered by insurance",
      selected: false,
    },
    {
      id: "CLM-2025-005",
      patientName: "James Wilson",
      provider: "Orthopedic Specialists",
      amount: 2100.75,
      submissionDate: "2025-06-08",
      status: "pending",
      insuranceProvider: "Medicare",
      claimType: "Rehabilitation",
      description: "Physical therapy for shoulder injury",
      processingTime: "Pending",
      assignedTo: "Sarah Johnson",
      priority: "Medium",
      documents: ["Therapy Plan", "Progress Notes", "Physician Referral"],
      notes: "Awaiting Medicare approval for extended therapy sessions",
      selected: false,
    },
    {
      id: "CLM-2025-006",
      patientName: "Linda Brown",
      provider: "Dental Associates",
      amount: 875.5,
      submissionDate: "2025-06-07",
      status: "approved",
      insuranceProvider: "Delta Dental",
      claimType: "Dental",
      description: "Root canal and crown",
      processingTime: "22 hours",
      assignedTo: "Michael Chen",
      priority: "Medium",
      documents: ["Dental X-Rays", "Treatment Plan", "Insurance Card"],
      notes: "Patient has reached 80% of annual dental coverage",
      selected: false,
    },
    {
      id: "CLM-2025-007",
      patientName: "Thomas Lee",
      provider: "Vision Care Center",
      amount: 325.0,
      submissionDate: "2025-06-06",
      status: "rejected",
      insuranceProvider: "VSP",
      claimType: "Vision",
      description: "Annual eye exam and prescription glasses",
      processingTime: "30 hours",
      assignedTo: "Jessica Taylor",
      priority: "Low",
      documents: ["Vision Prescription", "Receipt", "Claim Form"],
      notes: "Rejected due to out-of-network provider",
      selected: false,
    },
    {
      id: "CLM-2025-008",
      patientName: "Susan Miller",
      provider: "Women's Health Clinic",
      amount: 1150.25,
      submissionDate: "2025-06-05",
      status: "pending",
      insuranceProvider: "Humana",
      claimType: "Gynecological",
      description: "Annual gynecological exam and tests",
      processingTime: "Pending",
      assignedTo: "David Wilson",
      priority: "Medium",
      documents: ["Lab Results", "Examination Report", "Insurance Card"],
      notes: "Waiting for lab test results confirmation",
      selected: false,
    },
    {
      id: "CLM-2025-009",
      patientName: "Michael Taylor",
      provider: "Cardiology Institute",
      amount: 4250.0,
      submissionDate: "2025-06-04",
      status: "approved",
      insuranceProvider: "Blue Cross",
      claimType: "Cardiac",
      description: "Stress test and echocardiogram",
      processingTime: "20 hours",
      assignedTo: "Sarah Johnson",
      priority: "High",
      documents: ["Cardiology Report", "ECG Results", "Physician Notes"],
      notes: "Patient has history of heart disease",
      selected: false,
    },
    {
      id: "CLM-2025-010",
      patientName: "Jennifer Adams",
      provider: "Pediatric Center",
      amount: 450.75,
      submissionDate: "2025-06-03",
      status: "rejected",
      insuranceProvider: "Aetna",
      claimType: "Pediatric",
      description: "Well-child visit and vaccinations",
      processingTime: "28 hours",
      assignedTo: "Michael Chen",
      priority: "Medium",
      documents: ["Vaccination Record", "Growth Chart", "Claim Form"],
      notes: "Rejected due to incorrect insurance information",
      selected: false,
    },
    {
      id: "CLM-2025-011",
      patientName: "William Harris",
      provider: "Urgent Care Clinic",
      amount: 675.5,
      submissionDate: "2025-06-02",
      status: "pending",
      insuranceProvider: "United Health",
      claimType: "Urgent Care",
      description: "Treatment for severe flu symptoms",
      processingTime: "Pending",
      assignedTo: "Jessica Taylor",
      priority: "High",
      documents: ["Treatment Notes", "Prescription", "Claim Form"],
      notes: "Waiting for clarification on medication charges",
      selected: false,
    },
    {
      id: "CLM-2025-012",
      patientName: "Patricia Martinez",
      provider: "Dermatology Specialists",
      amount: 925.25,
      submissionDate: "2025-06-01",
      status: "approved",
      insuranceProvider: "Cigna",
      claimType: "Dermatological",
      description: "Skin biopsy and treatment",
      processingTime: "26 hours",
      assignedTo: "David Wilson",
      priority: "Medium",
      documents: ["Biopsy Results", "Treatment Plan", "Follow-up Schedule"],
      notes: "Follow-up appointment scheduled for two weeks",
      selected: false,
    },
    {
      id: "CLM-2025-013",
      patientName: "Daniel Rodriguez",
      provider: "Neurology Associates",
      amount: 3275.5,
      submissionDate: "2025-05-30",
      status: "pending",
      insuranceProvider: "Medicare",
      claimType: "Neurological",
      description: "EEG and neurological assessment",
      processingTime: "Pending",
      assignedTo: "Sarah Johnson",
      priority: "High",
      documents: ["EEG Results", "Neurological Assessment", "Medical History"],
      notes: "Complex case requiring specialist review",
      selected: false,
    },
    {
      id: "CLM-2025-014",
      patientName: "Elizabeth White",
      provider: "Allergy & Asthma Center",
      amount: 890.0,
      submissionDate: "2025-05-29",
      status: "approved",
      insuranceProvider: "Blue Cross",
      claimType: "Allergy",
      description: "Allergy testing and immunotherapy",
      processingTime: "23 hours",
      assignedTo: "Michael Chen",
      priority: "Medium",
      documents: ["Allergy Test Results", "Treatment Plan", "Insurance Card"],
      notes: "Patient approved for 12-month immunotherapy plan",
      selected: false,
    },
    {
      id: "CLM-2025-015",
      patientName: "Christopher Thompson",
      provider: "Sports Medicine Clinic",
      amount: 1450.25,
      submissionDate: "2025-05-28",
      status: "rejected",
      insuranceProvider: "Aetna",
      claimType: "Sports Medicine",
      description: "ACL tear evaluation and treatment plan",
      processingTime: "32 hours",
      assignedTo: "Jessica Taylor",
      priority: "High",
      documents: ["MRI Results", "Treatment Recommendation", "Claim Form"],
      notes: "Rejected due to experimental treatment protocol",
      selected: false,
    },
  ];
  // Filter claims based on search query, status filter, and date range
  const filterClaims = () => {
    return claimsData.filter((claim) => {
      const matchesSearch =
        claim.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        claim.patientName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        claim.provider.toLowerCase().includes(searchQuery.toLowerCase()) ||
        claim.claimType.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesStatus =
        filterStatus === "all" || claim.status === filterStatus;
      const claimDate = new Date(claim.submissionDate);
      const startDate = new Date(dateRange.start);
      const endDate = new Date(dateRange.end);
      const matchesDateRange = claimDate >= startDate && claimDate <= endDate;
      return matchesSearch && matchesStatus && matchesDateRange;
    });
  };
  // Sort claims
  const sortClaims = (claims: Claim[]) => {
    if (!sortConfig.key) return claims;
    return [...claims].sort((a, b) => {
      if (a[sortConfig.key!] < b[sortConfig.key!]) {
        return sortConfig.direction === "ascending" ? -1 : 1;
      }
      if (a[sortConfig.key!] > b[sortConfig.key!]) {
        return sortConfig.direction === "ascending" ? 1 : -1;
      }
      return 0;
    });
  };
  const filteredClaims = sortClaims(filterClaims());
  // Pagination
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentClaims = filteredClaims.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredClaims.length / itemsPerPage);
  // Handle claim selection
  const handleClaimSelect = (claim: Claim) => {
    setSelectedClaim(claim);
  };
  // Handle status filter change
  const handleStatusFilterChange = (status: string) => {
    setFilterStatus(status);
    setCurrentPage(1);
  };
  // Handle search input change
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };
  // Handle pagination
  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };
  // Handle sort
  const requestSort = (key: keyof Claim) => {
    let direction: "ascending" | "descending" = "ascending";
    if (sortConfig.key === key && sortConfig.direction === "ascending") {
      direction = "descending";
    }
    setSortConfig({ key, direction });
  };
  // Handle checkbox selection
  const handleCheckboxChange = (claimId: string) => {
    setSelectedClaims((prev) => {
      if (prev.includes(claimId)) {
        return prev.filter((id) => id !== claimId);
      } else {
        return [...prev, claimId];
      }
    });
  };
  // Handle select all
  const handleSelectAll = () => {
    if (selectAll) {
      setSelectedClaims([]);
    } else {
      setSelectedClaims(currentClaims.map((claim) => claim.id));
    }
    setSelectAll(!selectAll);
  };
  // Handle date range change
  const handleDateRangeChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    type: "start" | "end",
  ) => {
    setDateRange((prev) => ({
      ...prev,
      [type]: e.target.value,
    }));
  };
  // Reset all filters
  const resetFilters = () => {
    setSearchQuery("");
    setFilterStatus("all");
    setDateRange({ start: "2025-05-01", end: "2025-06-10" });
    setSortConfig({ key: null, direction: "ascending" });
    setCurrentPage(1);
  };
  // Effect to update selectAll state when selectedClaims changes
  useEffect(() => {
    if (
      currentClaims.length > 0 &&
      selectedClaims.length === currentClaims.length
    ) {
      setSelectAll(true);
    } else {
      setSelectAll(false);
    }
  }, [selectedClaims, currentClaims]);
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm fixed top-0 left-0 right-0 z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <img
                  className="h-8 w-auto"
                  src="https://readdy.ai/api/search-image?query=A%2520modern%252C%2520minimalist%2520healthcare%2520logo%2520with%2520a%2520blue%2520and%2520teal%2520color%2520scheme%252C%2520featuring%2520a%2520stylized%2520medical%2520cross%2520or%2520caduceus%2520symbol%2520integrated%2520with%2520a%2520shield%2520or%2520protective%2520element%252C%2520suitable%2520for%2520a%2520healthcare%2520claims%2520management%2520system&width=200&height=80&seq=logo1&orientation=landscape"
                  alt="Healthcare Claims Management"
                />
                <span className="ml-2 text-lg font-semibold text-gray-900">
                  ClaimsPro
                </span>
              </div>
              <nav className="ml-6 flex space-x-8">
                <a
                  href="https://readdy.ai/home/05c949dc-8c27-4326-acdb-c32485d3bc67/3c98454b-7c94-4c48-a77d-0774227525af"
                  data-readdy="true"
                  className="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium cursor-pointer"
                >
                  Dashboard
                </a>
                <a
                  href="#"
                  className="border-b-2 border-indigo-500 text-gray-900 inline-flex items-center px-1 pt-1 text-sm font-medium cursor-pointer"
                >
                  Claims
                </a>
                <a
                  href="https://readdy.ai/home/05c949dc-8c27-4326-acdb-c32485d3bc67/8398062c-6412-418d-8bbe-6cc3adc6ef79"
                  data-readdy="true"
                  className="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium cursor-pointer"
                >
                  Reports
                </a>
                <a
                  href="#"
                  className="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium cursor-pointer"
                >
                  Settings
                </a>
              </nav>
            </div>
            <div className="flex items-center">
              <div className="w-full max-w-lg lg:max-w-xs relative">
                <label htmlFor="search" className="sr-only">
                  Search
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i className="fas fa-search text-gray-400 text-sm"></i>
                  </div>
                  <input
                    id="search"
                    name="search"
                    className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    placeholder="Search claims, patients, providers..."
                    type="search"
                    value={searchQuery}
                    onChange={handleSearchChange}
                  />
                </div>
              </div>
              <div className="ml-4 flex items-center md:ml-6">
                {/* Notifications dropdown */}
                <div className="relative">
                  <button
                    type="button"
                    className="bg-white p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                    onClick={() => setIsNotificationsOpen(!isNotificationsOpen)}
                  >
                    <span className="sr-only">View notifications</span>
                    <i className="fas fa-bell"></i>
                    <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-500"></span>
                  </button>
                  {isNotificationsOpen && (
                    <div className="origin-top-right absolute right-0 mt-2 w-80 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-20">
                      <div className="px-4 py-2 border-b border-gray-100">
                        <h3 className="text-sm font-medium text-gray-900">
                          Notifications
                        </h3>
                      </div>
                      <div className="max-h-60 overflow-y-auto">
                        <a
                          href="#"
                          className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer"
                        >
                          <p className="font-medium">New claim submitted</p>
                          <p className="text-xs text-gray-500">
                            Patient: Emma Davis - 10 minutes ago
                          </p>
                        </a>
                        <a
                          href="#"
                          className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer"
                        >
                          <p className="font-medium">Claim approved</p>
                          <p className="text-xs text-gray-500">
                            Claim ID: CLM-2025-001 - 1 hour ago
                          </p>
                        </a>
                        <a
                          href="#"
                          className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer"
                        >
                          <p className="font-medium">Claim rejected</p>
                          <p className="text-xs text-gray-500">
                            Claim ID: CLM-2025-003 - 2 hours ago
                          </p>
                        </a>
                      </div>
                      <div className="px-4 py-2 border-t border-gray-100 text-center">
                        <a
                          href="#"
                          className="text-xs text-indigo-600 hover:text-indigo-500 cursor-pointer"
                        >
                          View all notifications
                        </a>
                      </div>
                    </div>
                  )}
                </div>
                {/* Profile dropdown */}
                <div className="ml-3 relative">
                  <div>
                    <button
                      type="button"
                      className="max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                      onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
                    >
                      <span className="sr-only">Open user menu</span>
                      <img
                        className="h-8 w-8 rounded-full"
                        src="https://readdy.ai/api/search-image?query=Professional%2520headshot%2520of%2520a%2520healthcare%2520administrator%252C%2520business%2520professional%2520with%2520a%2520friendly%2520expression%252C%2520wearing%2520business%2520attire%252C%2520neutral%2520background%252C%2520high%2520quality%2520portrait&width=100&height=100&seq=user1&orientation=squarish"
                        alt="User profile"
                      />
                    </button>
                  </div>
                  {isUserMenuOpen && (
                    <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-20">
                      <a
                        href="#"
                        className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer"
                      >
                        Your Profile
                      </a>
                      <a
                        href="#"
                        className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer"
                      >
                        Settings
                      </a>
                      <a
                        href="#"
                        className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer"
                      >
                        Sign out
                      </a>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>
      <main className="pt-16 pb-10 min-h-screen">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Page Header with Breadcrumbs */}
          <div className="py-6">
            <div className="flex items-center text-sm text-gray-500 mb-4">
              <a
                href="https://readdy.ai/home/05c949dc-8c27-4326-acdb-c32485d3bc67/3c98454b-7c94-4c48-a77d-0774227525af"
                data-readdy="true"
                className="hover:text-indigo-600 cursor-pointer"
              >
                Dashboard
              </a>
              <i className="fas fa-chevron-right mx-2 text-xs"></i>
              <span className="text-gray-700">Claims Management</span>
            </div>
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-2xl font-semibold text-gray-900">
                  Claims Management
                </h1>
                <p className="mt-1 text-sm text-gray-500">
                  View, process, and manage all healthcare claims in one place.
                </p>
              </div>
              <div className="flex space-x-3">
                <button
                  type="button"
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                >
                  <i className="fas fa-plus mr-2"></i>
                  New Claim
                </button>
                <button
                  type="button"
                  className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                >
                  <i className="fas fa-file-upload mr-2"></i>
                  Batch Upload
                </button>
              </div>
            </div>
          </div>
          {/* Filters and Actions Bar */}
          <div className="bg-white shadow rounded-lg mb-6">
            <div className="px-4 py-5 sm:p-6">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
                {/* Status Filter Tabs */}
                <div className="flex space-x-4 overflow-x-auto pb-2 md:pb-0">
                  <button
                    className={`px-3 py-2 text-sm font-medium rounded-md ${
                      filterStatus === "all"
                        ? "bg-indigo-100 text-indigo-700"
                        : "text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                    } !rounded-button whitespace-nowrap cursor-pointer`}
                    onClick={() => handleStatusFilterChange("all")}
                  >
                    All Claims
                  </button>
                  <button
                    className={`px-3 py-2 text-sm font-medium rounded-md ${
                      filterStatus === "pending"
                        ? "bg-yellow-100 text-yellow-700"
                        : "text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                    } !rounded-button whitespace-nowrap cursor-pointer`}
                    onClick={() => handleStatusFilterChange("pending")}
                  >
                    <i className="fas fa-clock mr-1"></i>
                    Pending
                  </button>
                  <button
                    className={`px-3 py-2 text-sm font-medium rounded-md ${
                      filterStatus === "approved"
                        ? "bg-green-100 text-green-700"
                        : "text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                    } !rounded-button whitespace-nowrap cursor-pointer`}
                    onClick={() => handleStatusFilterChange("approved")}
                  >
                    <i className="fas fa-check mr-1"></i>
                    Approved
                  </button>
                  <button
                    className={`px-3 py-2 text-sm font-medium rounded-md ${
                      filterStatus === "rejected"
                        ? "bg-red-100 text-red-700"
                        : "text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                    } !rounded-button whitespace-nowrap cursor-pointer`}
                    onClick={() => handleStatusFilterChange("rejected")}
                  >
                    <i className="fas fa-times mr-1"></i>
                    Rejected
                  </button>
                </div>
                {/* Date Range Filter */}
                <div className="flex items-center space-x-3">
                  <div className="flex items-center space-x-2">
                    <label
                      htmlFor="date-from"
                      className="text-sm text-gray-500"
                    >
                      From:
                    </label>
                    <input
                      type="date"
                      id="date-from"
                      className="border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                      value={dateRange.start}
                      onChange={(e) => handleDateRangeChange(e, "start")}
                    />
                  </div>
                  <div className="flex items-center space-x-2">
                    <label htmlFor="date-to" className="text-sm text-gray-500">
                      To:
                    </label>
                    <input
                      type="date"
                      id="date-to"
                      className="border border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                      value={dateRange.end}
                      onChange={(e) => handleDateRangeChange(e, "end")}
                    />
                  </div>
                  <button
                    onClick={resetFilters}
                    className="text-sm text-indigo-600 hover:text-indigo-500 cursor-pointer"
                  >
                    Reset
                  </button>
                </div>
              </div>
              {/* Action Buttons */}
              <div className="mt-4 flex flex-wrap items-center justify-between gap-3">
                <div className="flex items-center text-sm text-gray-500">
                  <span>{filteredClaims.length} claims found</span>
                  {selectedClaims.length > 0 && (
                    <span className="ml-2">
                      ({selectedClaims.length} selected)
                    </span>
                  )}
                </div>
                <div className="flex flex-wrap items-center space-x-3">
                  {/* Bulk Actions Dropdown */}
                  <div className="relative">
                    <button
                      type="button"
                      className={`inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md ${
                        selectedClaims.length === 0
                          ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                          : "text-gray-700 bg-white hover:bg-gray-50 cursor-pointer"
                      } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap`}
                      onClick={() =>
                        selectedClaims.length > 0 &&
                        setIsBulkActionDropdownOpen(!isBulkActionDropdownOpen)
                      }
                      disabled={selectedClaims.length === 0}
                    >
                      <i className="fas fa-tasks mr-2"></i>
                      Bulk Actions
                      <i className="fas fa-chevron-down ml-2"></i>
                    </button>
                    {isBulkActionDropdownOpen && (
                      <div className="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                        <div
                          className="py-1"
                          role="menu"
                          aria-orientation="vertical"
                        >
                          <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                            <i className="fas fa-check-circle mr-2 text-green-500"></i>
                            Approve Selected
                          </button>
                          <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                            <i className="fas fa-times-circle mr-2 text-red-500"></i>
                            Reject Selected
                          </button>
                          <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                            <i className="fas fa-flag mr-2 text-yellow-500"></i>
                            Flag for Review
                          </button>
                          <div className="border-t border-gray-100 my-1"></div>
                          <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                            <i className="fas fa-user-plus mr-2 text-indigo-500"></i>
                            Assign to...
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                  {/* Export Dropdown */}
                  <div className="relative">
                    <button
                      type="button"
                      className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                      onClick={() =>
                        setIsExportDropdownOpen(!isExportDropdownOpen)
                      }
                    >
                      <i className="fas fa-download mr-2"></i>
                      Export
                      <i className="fas fa-chevron-down ml-2"></i>
                    </button>
                    {isExportDropdownOpen && (
                      <div className="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                        <div
                          className="py-1"
                          role="menu"
                          aria-orientation="vertical"
                        >
                          <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                            <i className="fas fa-file-excel mr-2 text-green-600"></i>
                            Export to Excel
                          </button>
                          <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                            <i className="fas fa-file-csv mr-2 text-blue-600"></i>
                            Export to CSV
                          </button>
                          <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                            <i className="fas fa-file-pdf mr-2 text-red-600"></i>
                            Export to PDF
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                  {/* Advanced Filter Dropdown */}
                  <div className="relative">
                    <button
                      type="button"
                      className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                      onClick={() =>
                        setIsFilterDropdownOpen(!isFilterDropdownOpen)
                      }
                    >
                      <i className="fas fa-filter mr-2"></i>
                      Advanced Filter
                      <i className="fas fa-chevron-down ml-2"></i>
                    </button>
                    {isFilterDropdownOpen && (
                      <div className="origin-top-right absolute right-0 mt-2 w-80 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                        <div className="p-4">
                          <h4 className="text-sm font-medium text-gray-900 mb-3">
                            Filter Claims
                          </h4>
                          <div className="space-y-4">
                            <div>
                              <label
                                htmlFor="filter-type"
                                className="block text-sm font-medium text-gray-700 mb-1"
                              >
                                Claim Type
                              </label>
                              <select
                                id="filter-type"
                                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                              >
                                <option value="">All Types</option>
                                <option value="medical">Medical</option>
                                <option value="dental">Dental</option>
                                <option value="vision">Vision</option>
                                <option value="surgical">Surgical</option>
                                <option value="diagnostic">Diagnostic</option>
                              </select>
                            </div>
                            <div>
                              <label
                                htmlFor="filter-provider"
                                className="block text-sm font-medium text-gray-700 mb-1"
                              >
                                Insurance Provider
                              </label>
                              <select
                                id="filter-provider"
                                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                              >
                                <option value="">All Providers</option>
                                <option value="blue-cross">Blue Cross</option>
                                <option value="aetna">Aetna</option>
                                <option value="united-health">
                                  United Health
                                </option>
                                <option value="cigna">Cigna</option>
                                <option value="medicare">Medicare</option>
                              </select>
                            </div>
                            <div>
                              <label
                                htmlFor="filter-priority"
                                className="block text-sm font-medium text-gray-700 mb-1"
                              >
                                Priority
                              </label>
                              <select
                                id="filter-priority"
                                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                              >
                                <option value="">All Priorities</option>
                                <option value="high">High</option>
                                <option value="medium">Medium</option>
                                <option value="low">Low</option>
                              </select>
                            </div>
                            <div>
                              <label
                                htmlFor="filter-assigned"
                                className="block text-sm font-medium text-gray-700 mb-1"
                              >
                                Assigned To
                              </label>
                              <select
                                id="filter-assigned"
                                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                              >
                                <option value="">Anyone</option>
                                <option value="sarah-johnson">
                                  Sarah Johnson
                                </option>
                                <option value="michael-chen">
                                  Michael Chen
                                </option>
                                <option value="jessica-taylor">
                                  Jessica Taylor
                                </option>
                                <option value="david-wilson">
                                  David Wilson
                                </option>
                              </select>
                            </div>
                            <div className="flex justify-end space-x-3 pt-2">
                              <button
                                type="button"
                                className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                                onClick={() => setIsFilterDropdownOpen(false)}
                              >
                                Cancel
                              </button>
                              <button
                                type="button"
                                className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                              >
                                Apply Filters
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
          {/* Claims Table */}
          <div className="bg-white shadow rounded-lg overflow-hidden">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th
                      scope="col"
                      className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded cursor-pointer"
                          checked={selectAll}
                          onChange={handleSelectAll}
                        />
                      </div>
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                      onClick={() => requestSort("id")}
                    >
                      <div className="flex items-center">
                        Claim ID
                        {sortConfig.key === "id" && (
                          <span className="ml-1">
                            {sortConfig.direction === "ascending" ? (
                              <i className="fas fa-sort-up"></i>
                            ) : (
                              <i className="fas fa-sort-down"></i>
                            )}
                          </span>
                        )}
                      </div>
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                      onClick={() => requestSort("patientName")}
                    >
                      <div className="flex items-center">
                        Patient
                        {sortConfig.key === "patientName" && (
                          <span className="ml-1">
                            {sortConfig.direction === "ascending" ? (
                              <i className="fas fa-sort-up"></i>
                            ) : (
                              <i className="fas fa-sort-down"></i>
                            )}
                          </span>
                        )}
                      </div>
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                      onClick={() => requestSort("provider")}
                    >
                      <div className="flex items-center">
                        Provider
                        {sortConfig.key === "provider" && (
                          <span className="ml-1">
                            {sortConfig.direction === "ascending" ? (
                              <i className="fas fa-sort-up"></i>
                            ) : (
                              <i className="fas fa-sort-down"></i>
                            )}
                          </span>
                        )}
                      </div>
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                      onClick={() => requestSort("claimType")}
                    >
                      <div className="flex items-center">
                        Type
                        {sortConfig.key === "claimType" && (
                          <span className="ml-1">
                            {sortConfig.direction === "ascending" ? (
                              <i className="fas fa-sort-up"></i>
                            ) : (
                              <i className="fas fa-sort-down"></i>
                            )}
                          </span>
                        )}
                      </div>
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                      onClick={() => requestSort("amount")}
                    >
                      <div className="flex items-center">
                        Amount
                        {sortConfig.key === "amount" && (
                          <span className="ml-1">
                            {sortConfig.direction === "ascending" ? (
                              <i className="fas fa-sort-up"></i>
                            ) : (
                              <i className="fas fa-sort-down"></i>
                            )}
                          </span>
                        )}
                      </div>
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                      onClick={() => requestSort("submissionDate")}
                    >
                      <div className="flex items-center">
                        Date
                        {sortConfig.key === "submissionDate" && (
                          <span className="ml-1">
                            {sortConfig.direction === "ascending" ? (
                              <i className="fas fa-sort-up"></i>
                            ) : (
                              <i className="fas fa-sort-down"></i>
                            )}
                          </span>
                        )}
                      </div>
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                      onClick={() => requestSort("status")}
                    >
                      <div className="flex items-center">
                        Status
                        {sortConfig.key === "status" && (
                          <span className="ml-1">
                            {sortConfig.direction === "ascending" ? (
                              <i className="fas fa-sort-up"></i>
                            ) : (
                              <i className="fas fa-sort-down"></i>
                            )}
                          </span>
                        )}
                      </div>
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                      onClick={() => requestSort("assignedTo")}
                    >
                      <div className="flex items-center">
                        Assigned To
                        {sortConfig.key === "assignedTo" && (
                          <span className="ml-1">
                            {sortConfig.direction === "ascending" ? (
                              <i className="fas fa-sort-up"></i>
                            ) : (
                              <i className="fas fa-sort-down"></i>
                            )}
                          </span>
                        )}
                      </div>
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {currentClaims.length > 0 ? (
                    currentClaims.map((claim) => (
                      <tr
                        key={claim.id}
                        className={`hover:bg-gray-50 cursor-pointer ${selectedClaim?.id === claim.id ? "bg-indigo-50" : ""}`}
                        onClick={() => handleClaimSelect(claim)}
                      >
                        <td
                          className="px-3 py-4 whitespace-nowrap"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <div className="flex items-center">
                            <input
                              type="checkbox"
                              className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded cursor-pointer"
                              checked={selectedClaims.includes(claim.id)}
                              onChange={() => handleCheckboxChange(claim.id)}
                            />
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {claim.id}
                          {claim.priority === "High" && (
                            <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                              <i className="fas fa-exclamation-circle mr-1"></i>
                              High
                            </span>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {claim.patientName}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {claim.provider}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {claim.claimType}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          ${claim.amount.toFixed(2)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {claim.submissionDate}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full
${
  claim.status === "approved"
    ? "bg-green-100 text-green-800"
    : claim.status === "pending"
      ? "bg-yellow-100 text-yellow-800"
      : "bg-red-100 text-red-800"
}`}
                          >
                            {claim.status.charAt(0).toUpperCase() +
                              claim.status.slice(1)}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {claim.assignedTo}
                        </td>
                        <td
                          className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <div className="flex justify-end space-x-2">
                            <button
                              type="button"
                              className="text-indigo-600 hover:text-indigo-900 cursor-pointer"
                              title="View Details"
                            >
                              <i className="fas fa-eye"></i>
                            </button>
                            <button
                              type="button"
                              className="text-green-600 hover:text-green-900 cursor-pointer"
                              title="Approve"
                            >
                              <i className="fas fa-check"></i>
                            </button>
                            <button
                              type="button"
                              className="text-red-600 hover:text-red-900 cursor-pointer"
                              title="Reject"
                            >
                              <i className="fas fa-times"></i>
                            </button>
                            <div className="relative">
                              <button
                                type="button"
                                className="text-gray-600 hover:text-gray-900 cursor-pointer"
                                title="More Options"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  setIsAssignDropdownOpen(
                                    !isAssignDropdownOpen,
                                  );
                                }}
                              >
                                <i className="fas fa-ellipsis-v"></i>
                              </button>
                              {isAssignDropdownOpen && (
                                <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                                  <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                                    <i className="fas fa-user-plus mr-2"></i>
                                    Reassign
                                  </button>
                                  <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                                    <i className="fas fa-flag mr-2"></i>
                                    Flag for Review
                                  </button>
                                  <button className="text-gray-700 block px-4 py-2 text-sm w-full text-left hover:bg-gray-100 cursor-pointer">
                                    <i className="fas fa-print mr-2"></i>
                                    Print Claim
                                  </button>
                                </div>
                              )}
                            </div>
                          </div>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td
                        colSpan={10}
                        className="px-6 py-4 text-center text-sm text-gray-500"
                      >
                        No claims found matching your criteria.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
            {/* Pagination */}
            {filteredClaims.length > 0 && (
              <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                  <div>
                    <p className="text-sm text-gray-700">
                      Showing{" "}
                      <span className="font-medium">
                        {indexOfFirstItem + 1}
                      </span>{" "}
                      to{" "}
                      <span className="font-medium">
                        {indexOfLastItem > filteredClaims.length
                          ? filteredClaims.length
                          : indexOfLastItem}
                      </span>{" "}
                      of{" "}
                      <span className="font-medium">
                        {filteredClaims.length}
                      </span>{" "}
                      results
                    </p>
                  </div>
                  <div>
                    <nav
                      className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px"
                      aria-label="Pagination"
                    >
                      <button
                        onClick={() => handlePageChange(currentPage - 1)}
                        disabled={currentPage === 1}
                        className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${
                          currentPage === 1
                            ? "text-gray-300 cursor-not-allowed"
                            : "text-gray-500 hover:bg-gray-50 cursor-pointer"
                        } !rounded-button whitespace-nowrap`}
                      >
                        <span className="sr-only">Previous</span>
                        <i className="fas fa-chevron-left"></i>
                      </button>
                      {Array.from(
                        { length: Math.min(5, totalPages) },
                        (_, i) => {
                          let pageNumber;
                          if (totalPages <= 5) {
                            pageNumber = i + 1;
                          } else if (currentPage <= 3) {
                            pageNumber = i + 1;
                          } else if (currentPage >= totalPages - 2) {
                            pageNumber = totalPages - 4 + i;
                          } else {
                            pageNumber = currentPage - 2 + i;
                          }
                          return (
                            <button
                              key={pageNumber}
                              onClick={() => handlePageChange(pageNumber)}
                              className={`relative inline-flex items-center px-4 py-2 border ${
                                currentPage === pageNumber
                                  ? "z-10 bg-indigo-50 border-indigo-500 text-indigo-600"
                                  : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50"
                              } text-sm font-medium cursor-pointer !rounded-button whitespace-nowrap`}
                            >
                              {pageNumber}
                            </button>
                          );
                        },
                      )}
                      <button
                        onClick={() => handlePageChange(currentPage + 1)}
                        disabled={currentPage === totalPages}
                        className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${
                          currentPage === totalPages
                            ? "text-gray-300 cursor-not-allowed"
                            : "text-gray-500 hover:bg-gray-50 cursor-pointer"
                        } !rounded-button whitespace-nowrap`}
                      >
                        <span className="sr-only">Next</span>
                        <i className="fas fa-chevron-right"></i>
                      </button>
                    </nav>
                  </div>
                </div>
              </div>
            )}
          </div>
          {/* Claim Details Panel */}
          {selectedClaim && (
            <div className="mt-6 bg-white shadow rounded-lg overflow-hidden">
              <div className="px-4 py-5 sm:px-6 border-b border-gray-200">
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="text-lg leading-6 font-medium text-gray-900">
                      Claim Details: {selectedClaim.id}
                    </h3>
                    <p className="mt-1 max-w-2xl text-sm text-gray-500">
                      Submitted on {selectedClaim.submissionDate}
                    </p>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      type="button"
                      className={`inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm text-white ${
                        selectedClaim.status === "approved"
                          ? "bg-gray-400 cursor-not-allowed"
                          : "bg-green-600 hover:bg-green-700 cursor-pointer"
                      } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 !rounded-button whitespace-nowrap`}
                      disabled={selectedClaim.status === "approved"}
                    >
                      <i className="fas fa-check mr-1"></i>
                      Approve
                    </button>
                    <button
                      type="button"
                      className={`inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm text-white ${
                        selectedClaim.status === "rejected"
                          ? "bg-gray-400 cursor-not-allowed"
                          : "bg-red-600 hover:bg-red-700 cursor-pointer"
                      } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 !rounded-button whitespace-nowrap`}
                      disabled={selectedClaim.status === "rejected"}
                    >
                      <i className="fas fa-times mr-1"></i>
                      Reject
                    </button>
                    <button
                      type="button"
                      className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                    >
                      <i className="fas fa-flag mr-1"></i>
                      Flag
                    </button>
                    <button
                      type="button"
                      className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                    >
                      <i className="fas fa-print mr-1"></i>
                      Print
                    </button>
                  </div>
                </div>
              </div>
              <div className="px-4 py-5 sm:p-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {/* Left Column: Claim Information */}
                  <div className="md:col-span-1">
                    <h4 className="text-sm font-medium text-gray-900 mb-4">
                      Claim Information
                    </h4>
                    <dl className="space-y-3">
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Claim ID
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          {selectedClaim.id}
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Type
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          {selectedClaim.claimType}
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Amount
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          ${selectedClaim.amount.toFixed(2)}
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Submission Date
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          {selectedClaim.submissionDate}
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Status
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          <span
                            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full
${
  selectedClaim.status === "approved"
    ? "bg-green-100 text-green-800"
    : selectedClaim.status === "pending"
      ? "bg-yellow-100 text-yellow-800"
      : "bg-red-100 text-red-800"
}`}
                          >
                            {selectedClaim.status.charAt(0).toUpperCase() +
                              selectedClaim.status.slice(1)}
                          </span>
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Processing Time
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          {selectedClaim.processingTime}
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Priority
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          <span
                            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full
${
  selectedClaim.priority === "High"
    ? "bg-red-100 text-red-800"
    : selectedClaim.priority === "Medium"
      ? "bg-yellow-100 text-yellow-800"
      : "bg-green-100 text-green-800"
}`}
                          >
                            {selectedClaim.priority}
                          </span>
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Assigned To
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          {selectedClaim.assignedTo}
                        </dd>
                      </div>
                    </dl>
                  </div>
                  {/* Middle Column: Patient & Provider Information */}
                  <div className="md:col-span-1">
                    <h4 className="text-sm font-medium text-gray-900 mb-4">
                      Patient & Provider Information
                    </h4>
                    <dl className="space-y-3">
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Patient Name
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          {selectedClaim.patientName}
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Provider
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          {selectedClaim.provider}
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Insurance
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          {selectedClaim.insuranceProvider}
                        </dd>
                      </div>
                      <div className="grid grid-cols-3 gap-2">
                        <dt className="text-sm font-medium text-gray-500">
                          Description
                        </dt>
                        <dd className="text-sm text-gray-900 col-span-2">
                          {selectedClaim.description}
                        </dd>
                      </div>
                    </dl>
                    <h4 className="text-sm font-medium text-gray-900 mt-6 mb-4">
                      Documents
                    </h4>
                    <ul className="space-y-2">
                      {selectedClaim.documents.map((doc, index) => (
                        <li key={index} className="flex items-center text-sm">
                          <i className="fas fa-file-medical text-indigo-500 mr-2"></i>
                          <span className="text-gray-700">{doc}</span>
                          <button className="ml-2 text-indigo-600 hover:text-indigo-900 cursor-pointer">
                            <i className="fas fa-download"></i>
                          </button>
                        </li>
                      ))}
                      <li className="mt-3">
                        <button className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer">
                          <i className="fas fa-upload mr-1"></i>
                          Upload Document
                        </button>
                      </li>
                    </ul>
                  </div>
                  {/* Right Column: Processing History & Notes */}
                  <div className="md:col-span-1">
                    <h4 className="text-sm font-medium text-gray-900 mb-4">
                      Processing History
                    </h4>
                    <div className="flow-root">
                      <ul className="divide-y divide-gray-200">
                        <li className="py-3">
                          <div className="flex items-center space-x-3">
                            <div className="flex-shrink-0">
                              <span className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                                <i className="fas fa-file-medical text-green-600"></i>
                              </span>
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium text-gray-900 truncate">
                                Claim submitted
                              </p>
                              <p className="text-xs text-gray-500">
                                {selectedClaim.submissionDate} by{" "}
                                {selectedClaim.patientName}
                              </p>
                            </div>
                          </div>
                        </li>
                        <li className="py-3">
                          <div className="flex items-center space-x-3">
                            <div className="flex-shrink-0">
                              <span className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                                <i className="fas fa-user-check text-blue-600"></i>
                              </span>
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium text-gray-900 truncate">
                                Assigned to {selectedClaim.assignedTo}
                              </p>
                              <p className="text-xs text-gray-500">
                                {selectedClaim.submissionDate} by System
                              </p>
                            </div>
                          </div>
                        </li>
                        {selectedClaim.status === "approved" && (
                          <li className="py-3">
                            <div className="flex items-center space-x-3">
                              <div className="flex-shrink-0">
                                <span className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                                  <i className="fas fa-check-circle text-green-600"></i>
                                </span>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm font-medium text-gray-900 truncate">
                                  Claim approved
                                </p>
                                <p className="text-xs text-gray-500">
                                  {selectedClaim.submissionDate} by{" "}
                                  {selectedClaim.assignedTo}
                                </p>
                              </div>
                            </div>
                          </li>
                        )}
                        {selectedClaim.status === "rejected" && (
                          <li className="py-3">
                            <div className="flex items-center space-x-3">
                              <div className="flex-shrink-0">
                                <span className="h-8 w-8 rounded-full bg-red-100 flex items-center justify-center">
                                  <i className="fas fa-times-circle text-red-600"></i>
                                </span>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm font-medium text-gray-900 truncate">
                                  Claim rejected
                                </p>
                                <p className="text-xs text-gray-500">
                                  {selectedClaim.submissionDate} by{" "}
                                  {selectedClaim.assignedTo}
                                </p>
                              </div>
                            </div>
                          </li>
                        )}
                      </ul>
                    </div>
                    <h4 className="text-sm font-medium text-gray-900 mt-6 mb-4">
                      Notes
                    </h4>
                    <div className="bg-gray-50 p-3 rounded-md mb-4">
                      <p className="text-sm text-gray-700">
                        {selectedClaim.notes}
                      </p>
                    </div>
                    <div className="mt-3">
                      <label htmlFor="add-note" className="sr-only">
                        Add note
                      </label>
                      <textarea
                        id="add-note"
                        rows={3}
                        className="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border border-gray-300 rounded-md"
                        placeholder="Add a note..."
                      ></textarea>
                      <div className="mt-2 flex justify-end">
                        <button
                          type="button"
                          className="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 !rounded-button whitespace-nowrap cursor-pointer"
                        >
                          <i className="fas fa-plus mr-1"></i>
                          Add Note
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </main>
      {/* Footer */}
      <footer className="bg-white">
        <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8 border-t border-gray-200">
          <div className="md:flex md:items-center md:justify-between">
            <div className="flex space-x-6 md:order-2">
              <a
                href="#"
                className="text-gray-400 hover:text-gray-500 cursor-pointer"
              >
                <span className="sr-only">Documentation</span>
                <i className="fas fa-book"></i>
              </a>
              <a
                href="#"
                className="text-gray-400 hover:text-gray-500 cursor-pointer"
              >
                <span className="sr-only">Support</span>
                <i className="fas fa-question-circle"></i>
              </a>
              <a
                href="#"
                className="text-gray-400 hover:text-gray-500 cursor-pointer"
              >
                <span className="sr-only">GitHub</span>
                <i className="fab fa-github"></i>
              </a>
            </div>
            <div className="mt-8 md:mt-0 md:order-1">
              <div className="flex items-center">
                <p className="text-sm text-gray-500">
                  &copy; 2025 Healthcare Claims Management System. All rights
                  reserved.
                </p>
                <p className="ml-6 text-sm text-gray-500">
                  <i className="fas fa-sync-alt mr-1"></i> Last synced: June 10,
                  2025 14:32
                </p>
                <p className="ml-6 text-sm text-gray-500">
                  <i className="fas fa-code-branch mr-1"></i> Version 2.4.1
                </p>
              </div>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};
// Types
interface Claim {
  id: string;
  patientName: string;
  provider: string;
  amount: number;
  submissionDate: string;
  status: "approved" | "pending" | "rejected";
  insuranceProvider: string;
  claimType: string;
  description: string;
  processingTime: string;
  assignedTo: string;
  priority: string;
  documents: string[];
  notes: string;
  selected: boolean;
}
export default App;
